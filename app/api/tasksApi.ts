import apiClient from './apiClient';

export interface Task {
    id: number;
    title: string;
    description?: string;
    estimatedDuration: number;
    priority: number;
    deadline?: string;
    type: string;
    startDate?: string;
    endDate?: string;
    totalSessions?: number;
    targetSessionsPerPeriod?: number;
    maxSessionsPerPeriod?: number;
    periodUnit?: 'day' | 'week' | 'month' | 'year';
    floating: boolean;
    blacklistedDays: string[];
    whitelistedDays: string[];
    minDaysBetween: number;
    autoReschedule: boolean;
    completedSessions: number;
    category: 'one-time' | 'recurring' | 'floating';
    timeOfDayPreference: 'morning' | 'afternoon' | 'evening' | 'preferred_time';
    bufferTime: number;
    difficulty: number;
    dependencies?: number[];
    canSplit: boolean;
    recurrencePattern?: string;
    preferredTime?: string;
    color?: string;
    createdAt: string;
    updatedAt: string;
}

export type CreateTaskDto = Omit<Task, 'id' | 'createdAt' | 'updatedAt'>;  // Omit the id, createdAt, and updatedAt fields, which are generated by the server
export type UpdateTaskDto = Partial<CreateTaskDto>;

export const tasksApi = {
    getAll: async (): Promise<Task[]> => {
        const response = await apiClient.get<Task[]>('/api/tasks');
        return response.data;
    },

    getOne: async (id: number): Promise<Task> => {
        const response = await apiClient.get<Task>(`/api/tasks/${id}`);
        return response.data;
    },

    create: async (task: CreateTaskDto): Promise<Task> => {
        const response = await apiClient.post<Task>('/api/tasks', task);
        return response.data;
    },

    update: async (id: number, task: UpdateTaskDto): Promise<Task> => {
        const response = await apiClient.put<Task>(`/api/tasks/${id}`, task);
        return response.data;
    },

    delete: async (id: number): Promise<void> => {
        await apiClient.delete(`/api/tasks/${id}`);
    },

    getByDateRange: async (startDate: string, endDate: string): Promise<Task[]> => {
        const response = await apiClient.get<Task[]>('/api/tasks/date-range', {
            params: { startDate, endDate },
        });
        return response.data;
    },

    getOverdue: async (): Promise<Task[]> => {
        const response = await apiClient.get<Task[]>('/api/tasks/overdue');
        return response.data;
    },

    updateCompletedSessions: async (id: number, completedSessions: number): Promise<Task> => {
        const response = await apiClient.patch<Task>(`/api/tasks/${id}/completed-sessions`, { completedSessions });
        return response.data;
    },
};